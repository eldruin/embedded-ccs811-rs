on:
  push:
  pull_request:

name: Build

env:
  RUSTFLAGS: '--deny warnings'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
        TARGET:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - arm-unknown-linux-gnueabi # Raspberry Pi 1
          - armv7-unknown-linux-gnueabihf # Raspberry Pi 2, 3, etc
          # Bare metal
          - thumbv6m-none-eabi
          - thumbv7em-none-eabi
          - thumbv7em-none-eabihf
          - thumbv7m-none-eabi

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.TARGET }}

      - name: Checkout CI scripts
        uses: actions/checkout@v4
        with:
          repository: 'eldruin/rust-driver-ci-scripts'
          ref: 'master'
          path: 'ci'

      - run: ./ci/patch-no-std.sh
        if: ${{ ! contains(matrix.TARGET, 'x86_64') }}

      - name: Build
        run: cargo build --target=${{ matrix.TARGET }}

  checks:
    name: Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
        TARGET:
          - x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.TARGET }}
          components: rustfmt

      - name: Doc
        run: cargo doc

      - name: Formatting
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
        TARGET:
          - x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.TARGET }}
          components: clippy

      - run: cargo clippy --message-format=json --all-features

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable]
        TARGET: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.TARGET }}

      - name: Test
        run: cargo test --target=${{ matrix.TARGET }}

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: upload to Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: './lcov.info'
